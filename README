Problem 1 - city traffic ============================ In a city, traffic is managed via traffic lights. Assume that each light goes green for 1 minute and red for 2 minutes. A stretch of road between 2 traffic lights can be either good or bad. A car driving on a good stretch does an average of 60 km/ hr, and on a bad stretch of 30 km/ hr. Assume that there is no other speed variance. If a car stops on a red light, it takes 10 seconds before it runs again once the light goes green. Write a program with test cases taking the layout (number of lights, distance between each light) between a start and end point as an input, and calculating the approximate time a car would take to cover the journey. Assume also that all lights are green at the start of the journey.

Source files

JourneyTimeCalculator is the main calss which has the method calculateTimeTaken.
This method takes Route object which holds the list of Stretches. calculateTimeTaken method iterates through Stretch object and calculates the time taken.

Refer to TestJourneyTimeCalculator for sample usage of JourneyTimeCalculator 

Route route = new Route();
route.addStretch(new GoodStretch(2));
route.addStretch(new BadStretch(2));
JourneyTimeCalculator calc = new JourneyTimeCalculator();
long time = calc.calculateTimeTaken(route);

Refactoring carried

1. Route was exposing streches object by public getter method. Now there is no need to give it out. Even if required Iterator might be a better option.So JourneyTimeCalculator object was not required.
2. Speed was a property of the Car so created new Car object and average speed as property.
3. Based on the type stretch speed of vehicle varies so adjusting the speed is part of time calculation.

New code will look like-

		Route route = new Route();
		route.addStretch(new GoodStretch(0.0f));
		Car car = new Car(60.0f / 60);
		long time = route.calculateTimeTaken(car);
 

